// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package articleservice

import (
	"context"

	"article_demo/rpc/article"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                        = article.Empty
	GetSubscribedArticle         = article.GetSubscribedArticle
	GetSubscribedArticleResponse = article.GetSubscribedArticleResponse
	UserFollowArticle            = article.UserFollowArticle
	UserFollowArticleRequest     = article.UserFollowArticleRequest
	UserFollowArticleResponse    = article.UserFollowArticleResponse
	UserUnFollowArticle          = article.UserUnFollowArticle
	UserUnFollowArticleRequest   = article.UserUnFollowArticleRequest
	UserUnFollowArticleResponse  = article.UserUnFollowArticleResponse

	ArticleService interface {
		GetSubscribedArticle(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSubscribedArticleResponse, error)
		UserFollowArticle(ctx context.Context, in *UserFollowArticleRequest, opts ...grpc.CallOption) (*UserFollowArticleResponse, error)
		UserUnFollowArticle(ctx context.Context, in *UserUnFollowArticleRequest, opts ...grpc.CallOption) (*UserUnFollowArticleResponse, error)
	}

	defaultArticleService struct {
		cli zrpc.Client
	}
)

func NewArticleService(cli zrpc.Client) ArticleService {
	return &defaultArticleService{
		cli: cli,
	}
}

func (m *defaultArticleService) GetSubscribedArticle(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSubscribedArticleResponse, error) {
	client := article.NewArticleServiceClient(m.cli.Conn())
	return client.GetSubscribedArticle(ctx, in, opts...)
}

func (m *defaultArticleService) UserFollowArticle(ctx context.Context, in *UserFollowArticleRequest, opts ...grpc.CallOption) (*UserFollowArticleResponse, error) {
	client := article.NewArticleServiceClient(m.cli.Conn())
	return client.UserFollowArticle(ctx, in, opts...)
}

func (m *defaultArticleService) UserUnFollowArticle(ctx context.Context, in *UserUnFollowArticleRequest, opts ...grpc.CallOption) (*UserUnFollowArticleResponse, error) {
	client := article.NewArticleServiceClient(m.cli.Conn())
	return client.UserUnFollowArticle(ctx, in, opts...)
}
