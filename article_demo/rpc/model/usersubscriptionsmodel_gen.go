// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userSubscriptionsFieldNames          = builder.RawFieldNames(&UserSubscriptions{})
	userSubscriptionsRows                = strings.Join(userSubscriptionsFieldNames, ",")
	userSubscriptionsRowsExpectAutoSet   = strings.Join(stringx.Remove(userSubscriptionsFieldNames, "`subscription_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userSubscriptionsRowsWithPlaceHolder = strings.Join(stringx.Remove(userSubscriptionsFieldNames, "`subscription_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserSubscriptionsSubscriptionIdPrefix = "cache:userSubscriptions:subscriptionId:"
)

type (
	userSubscriptionsModel interface {
		Insert(ctx context.Context, data *UserSubscriptions) (sql.Result, error)
		FindOne(ctx context.Context, subscriptionId int64) (*UserSubscriptions, error)
		Update(ctx context.Context, data *UserSubscriptions) error
		Delete(ctx context.Context, subscriptionId int64) error
		FindOneByUserIdAndArticleId(ctx context.Context, userId int64, articleId int64) (*UserSubscriptions, error) //  根据用户ID和文章ID查询是否已经关注过
	}

	defaultUserSubscriptionsModel struct {
		sqlc.CachedConn
		table string
	}

	UserSubscriptions struct {
		SubscriptionId int64 `db:"subscription_id"` // 订阅ID
		UserId         int64 `db:"user_id"`         // 用户ID
		ArticleId      int64 `db:"article_id"`      // 文章ID
	}
)

func newUserSubscriptionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserSubscriptionsModel {
	return &defaultUserSubscriptionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_subscriptions`",
	}
}

func (m *defaultUserSubscriptionsModel) Delete(ctx context.Context, subscriptionId int64) error {
	userSubscriptionsSubscriptionIdKey := fmt.Sprintf("%s%v", cacheUserSubscriptionsSubscriptionIdPrefix, subscriptionId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `subscription_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, subscriptionId)
	}, userSubscriptionsSubscriptionIdKey)
	return err
}

func (m *defaultUserSubscriptionsModel) FindOne(ctx context.Context, subscriptionId int64) (*UserSubscriptions, error) {
	userSubscriptionsSubscriptionIdKey := fmt.Sprintf("%s%v", cacheUserSubscriptionsSubscriptionIdPrefix, subscriptionId)
	var resp UserSubscriptions
	err := m.QueryRowCtx(ctx, &resp, userSubscriptionsSubscriptionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `subscription_id` = ? limit 1", userSubscriptionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, subscriptionId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserSubscriptionsModel) Insert(ctx context.Context, data *UserSubscriptions) (sql.Result, error) {
	userSubscriptionsSubscriptionIdKey := fmt.Sprintf("%s%v", cacheUserSubscriptionsSubscriptionIdPrefix, data.SubscriptionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userSubscriptionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ArticleId)
	}, userSubscriptionsSubscriptionIdKey)
	return ret, err
}

func (m *defaultUserSubscriptionsModel) Update(ctx context.Context, data *UserSubscriptions) error {
	userSubscriptionsSubscriptionIdKey := fmt.Sprintf("%s%v", cacheUserSubscriptionsSubscriptionIdPrefix, data.SubscriptionId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `subscription_id` = ?", m.table, userSubscriptionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ArticleId, data.SubscriptionId)
	}, userSubscriptionsSubscriptionIdKey)
	return err
}

func (m *defaultUserSubscriptionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserSubscriptionsSubscriptionIdPrefix, primary)
}

func (m *defaultUserSubscriptionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `subscription_id` = ? limit 1", userSubscriptionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserSubscriptionsModel) tableName() string {
	return m.table
}

func (m *defaultUserSubscriptionsModel) FindOneByUserIdAndArticleId(ctx context.Context, userId int64, articleId int64) (*UserSubscriptions, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `article_id` = ? limit 1 ", userSubscriptionsRows, m.table)
	var resp UserSubscriptions
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId, articleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}